#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'ubuntu-20.04 && immutable' }
  environment {
    REPO = "apm-mutating-webhook"
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    JOB_GIT_CREDENTIALS = "f6c7695a-671e-4f4f-a331-acdce44ff9ba"
    PIPELINE_LOG_LEVEL = 'INFO'
    RELEASE_URL_MESSAGE = "(<https://github.com/elastic/${env.REPO}/releases/tag/${env.TAG_NAME}|${env.TAG_NAME}>)"
    NOTIFY_TO = "build-apm+${env.REPO}@elastic.co"
    SLACK_CHANNEL = '#apm-server'
    DOCKER_IMAGE_NAME = 'apm-attacher'
    DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'
    DOCKER_REGISTRY = 'docker.elastic.co'
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger("${obltGitHubComments()}")
  }
  stages {
    stage('Checkout') {
      steps {
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}", githubNotifyFirstTimeContributor: true)
        pipelineManager([ cancelPreviousRunningBuilds: [ when: 'PR' ] ])
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
      }
    }
    stage('Lint'){
      steps {
        withGithubNotify(context: "Lint") {
          dir("${BASE_DIR}"){
            withGoEnv(){
              sh(label: 'lint', script: '''
                go mod tidy && git diff --exit-code
                gofmt -l . | read && echo "Code differs from gofmt's style. Run 'gofmt -w .'" 1>&2 && exit 1 || true
              ''')
              sh(label: 'Go vet', script: 'go vet')
            }
          }
        }
        withGithubNotify(context: "NOTICE.txt") {
          dir("${BASE_DIR}"){
            withGoEnv(){
              sh(label: 'notice', script: '''
                bash ./scripts/notice.sh
                git diff --exit-code
              ''')
            }
          }
        }
      }
    }
    stage('build'){
      steps {
        withGithubNotify(context: "Build") {
          deleteDir()
          unstash 'source'
          dir("${BASE_DIR}"){
            withGoEnv(){
              cmd(label: 'Go build', script: 'go build')
            }
          }
        }
      }
    }
    stage('Test') {
      steps {
        withGithubNotify(context: "Test") {
          deleteDir()
          unstash 'source'
          dir("${BASE_DIR}"){
            withGoEnv(){
              goTestJUnit(options: '-v ./...', output: 'junit-report.xml')
            }
          }
        }
      }
      post {
        always {
          junit(allowEmptyResults: true, keepLongStdio: true, testResults: '**/junit-report.xml')
        }
      }
    }
    stage('Package') {
      when {
        beforeAgent true
        not { changeRequest() }
      }
      steps {
        withGithubNotify(context: 'Package') {
          publishDockerImage(imageName: "${env.DOCKER_IMAGE_NAME}", imageTag: "${env.GIT_BASE_COMMIT}", shortGitSha: true)
        }
      }
    }
    stage('Release') {
      options { skipDefaultCheckout() }
      when {
        beforeAgent true
        tag pattern: 'v\\d+.*', comparator: 'REGEXP'
      }
      stages {
        stage('Docker') {
          steps {
            publishDockerImage(imageName: "${env.DOCKER_IMAGE_NAME}", imageTag: "${env.TAG_NAME}")
          }
        }
        stage('Helm') {
          steps {
            withCredentials([string(credentialsId: 'release-helm-charts-job', variable: 'TOKEN')]) {
              triggerRemoteJob(auth: CredentialsAuth(credentials: 'local-readonly-api-token'),
                job: 'https://internal-ci.elastic.co/job/elastic+unified-release+main+helm-charts-publish',
                token: TOKEN,
                parameters: [
                  helm_chart: "APM-Mutating-Webhook",
                  tag_name: "${env.TAG_NAME}",
                  repository: "prod",
                ],
                useCrumbCache: false,
                useJobInfoCache: false
              )
            }
          }
        }
        stage('Release Notes') {
          steps {
            withGhEnv(forceInstallation: true, version: '2.4.0') {
              dir("${BASE_DIR}"){
                cmd(label: 'make release-notes', script: 'make -C .ci release-notes')
              }
            }
          }
        }
      }
      post {
        success {
          notifyStatus(slackStatus: 'good', subject: "[${env.REPO}] Release *${env.TAG_NAME}* has been published", body: "Build: (<${env.RUN_DISPLAY_URL}|here>)\nRelease URL: ${env.RELEASE_URL_MESSAGE}")
        }
        failure {
          notifyStatus(slackStatus: 'danger', subject: "[${env.REPO}] Release *${env.TAG_NAME}* failed", body: "Build: (<${env.RUN_DISPLAY_URL}|here>)\nRelease URL: ${env.RELEASE_URL_MESSAGE}")
        }
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult(prComment: true)
    }
  }
}

def publishDockerImage(def args = [:]) {
  def imageName = args.imageName
  def imageTag = args.imageTag
  def shortGitSha = args.get('shortGitSha', false)
  deleteDir()
  unstash 'source'
  dir("${BASE_DIR}"){
    withMageEnv(){
      dockerLogin(secret: env.DOCKER_SECRET, registry: env.DOCKER_REGISTRY)
      sh(label: 'Package & Push', script: "./.ci/docker-package-push.sh ${env.DOCKER_REGISTRY}/observability ${imageName} ${imageTag} ${shortGitSha}")
    }
  }
}

def notifyStatus(def args = [:]) {
  releaseNotification(slackChannel: "${env.SLACK_CHANNEL}",
                      slackColor: args.slackStatus,
                      slackCredentialsId: 'jenkins-slack-integration-token',
                      to: "${env.NOTIFY_TO}",
                      subject: args.subject,
                      body: args.body)
}
