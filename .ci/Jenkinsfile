#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'ubuntu-20.04 && immutable' }
  environment {
    REPO = "apm-mutating-webhook"
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    JOB_GIT_CREDENTIALS = "f6c7695a-671e-4f4f-a331-acdce44ff9ba"
    PIPELINE_LOG_LEVEL = 'INFO'
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger("${obltGitHubComments()}")
  }
  stages {
    stage('Checkout') {
      steps {
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}", githubNotifyFirstTimeContributor: true)
        pipelineManager([ cancelPreviousRunningBuilds: [ when: 'PR' ] ])
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
      }
    }
    stage('Lint'){
      steps {
        withGithubNotify(context: "Lint") {
          dir("${BASE_DIR}"){
            withGoEnv(){
              sh(label: 'lint', script: '''
                go mod tidy && git diff --exit-code
                gofmt -l . | read && echo "Code differs from gofmt's style. Run 'gofmt -w .'" 1>&2 && exit 1 || true
              ''')
              sh(label: 'Go vet', script: 'go vet')
            }
          }
        }
        withGithubNotify(context: "NOTICE.txt") {
          dir("${BASE_DIR}"){
            withGoEnv(){
              sh(label: 'notice', script: '''
                bash ./scripts/notice.sh
                git diff --exit-code
              ''')
            }
          }
        }
      }
    }
    stage('build'){
      steps {
        withGithubNotify(context: "Build") {
          deleteDir()
          unstash 'source'
          dir("${BASE_DIR}"){
            withGoEnv(){
              cmd(label: 'Go build', script: 'go build')
            }
          }
        }
      }
    }
    stage('Test') {
      steps {
        withGithubNotify(context: "Test") {
          deleteDir()
          unstash 'source'
          dir("${BASE_DIR}"){
            withGoEnv(){
              goTestJUnit(options: '-v ./...', output: 'junit-report.xml')
            }
          }
        }
      }
      post {
        always {
          junit(allowEmptyResults: true, keepLongStdio: true, testResults: '**/junit-report.xml')
        }
      }
    }
    stage('Package') {
      environment {
        DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'
        DOCKER_REGISTRY = 'docker.elastic.co'
      }
      steps {
        withGithubNotify(context: 'Package') {
          deleteDir()
          unstash 'source'
          dir("${BASE_DIR}"){
            withMageEnv(){
              dockerLogin(secret: env.DOCKER_SECRET, registry: env.DOCKER_REGISTRY)
              sh(label: 'Package & Push', script: "./.ci/docker-package-push.sh ${env.DOCKER_REGISTRY}/observability ${env.REPO} ${env.GIT_BASE_COMMIT}")
            }
          }
        }
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult(prComment: true)
    }
  }
}
